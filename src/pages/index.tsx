import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import { api } from "~/utils/api";
import { useRouter } from "next/navigation";
import { useEffect, useState } from "react";
import Cookies from "js-cookie";

export default function Home() {
  const router = useRouter();
  let code: string | null = null;

  const handleURLReceived = (url: string): string => {
    // Extract the refresh token from the redirected URL
    if (window.location.href != "http://localhost:3000/") {
      const urlParams = new URLSearchParams(window.location.href.split("?")[1]);
      code = urlParams.get("code") ?? "";
    }

    if (code == null) {
      router.push(url);
    }
    if (code) return code;
    else return "";
  };

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" flex min-h-screen flex-col items-center justify-center bg-gradient-to-b from-[#2e026d] to-[#15162c]">
        <div className="container flex flex-col items-center justify-center gap-12 px-4 py-16 ">
          <h1 className="text-5xl font-extrabold tracking-tight text-white sm:text-[5rem]">
            Create <span className="text-[hsl(280,100%,70%)]">T3</span> App
          </h1>
          <div className="grid grid-cols-1 gap-4 sm:grid-cols-2 md:gap-8">
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/usage/first-steps"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">First Steps →</h3>
              <div className="text-lg">
                Just the basics - Everything you need to know to set up your
                database and authentication.
              </div>
            </Link>
            <Link
              className="flex max-w-xs flex-col gap-4 rounded-xl bg-white/10 p-4 text-white hover:bg-white/20"
              href="https://create.t3.gg/en/introduction"
              target="_blank"
            >
              <h3 className="text-2xl font-bold">Documentation →</h3>
              <div className="text-lg">
                Learn more about Create T3 App, the libraries it uses, and how
                to deploy it.
              </div>
            </Link>
          </div>
          <div className="flex flex-col items-center gap-2">
            <AuthShowcase />
            <GetRedirectionURLShowcase onURLReceived={handleURLReceived} />
            {/* {code && <GetAccessToken code={String(code)}/>} */}
          </div>
        </div>
      </main>
    </>
  );
}

function AuthShowcase() {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = api.post.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined },
  );

  return (
    <div className="flex flex-col items-center justify-center gap-4">
      <p className="text-center text-2xl text-white">
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
        onClick={sessionData ? () => void signOut() : () => void signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
}
interface GetRedirectionURLShowcaseProps {
  onURLReceived: (url: string) => void;
}

const AccessTokenComponent = ({ code }: { code: string }) => {
  const accessToken = useAccessToken(code);
  //console.log(code, "front-end code");
  useEffect(() => {
    if (accessToken) {
      // Do something with accessToken
    }
  }, [accessToken]);

  return null;
};

const GetRedirectionURLShowcase = ({
  onURLReceived,
}: GetRedirectionURLShowcaseProps) => {
  const [code, setCode] = useState<string | void | null>(null);
  const { data: url } = api.teamleader.getRedirectionURL.useQuery(
    undefined, // no input
  );

  useEffect(() => {
    if (url) {
      // Get the access token from teamleader with the code from the URL
      setCode(onURLReceived(url));
    }
  }, [url, onURLReceived]);

  return code ? <AccessTokenComponent code={String(code)} /> : null;
};

const useAccessToken = (code: string) => {
  const { data: tokens, isLoading } =
    api.teamleader.getAccessToken.useQuery(code);
  useEffect(() => {
    console.log("isLoading:", isLoading); // Debug log
    console.log("tokens:", tokens); // Debug log
    if (!isLoading && tokens && Object.keys(tokens).length > 0) {
      const tokenData = tokens as unknown as {
        access_token: string;
        refresh_token: string;
        expires_in: number; // assuming expires_in is a number representing seconds
      };
      console.log(tokenData);
      const expirationDate = new Date();
      expirationDate.setTime(
        expirationDate.getTime() + tokenData.expires_in * 1000,
      );
      Cookies.set("accessToken", tokenData.access_token, {
        expires: expirationDate,
      });
      Cookies.set("refreshToken", tokenData.refresh_token, {
        expires: expirationDate,
      });
      console.log(Cookies.get("accessToken"));
      console.log(Cookies.get("refreshToken"));
    }
  }, [tokens, isLoading]);
  return tokens;
};
