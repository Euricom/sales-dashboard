
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

// model Reservation {
//     id           String   @id @default(cuid()) @map("_id")
//     begin        Int      @default(0)
//     end          Int      @default(0)
//     userId       String
//     userName     String
//     location     Location @relation(fields: [locationId], references: [id])
//     locationId   String
//     locationName String
//     date         DateTime @default(now())
//     type         String
//     day          Int
//     month        Int
//     year         Int
//     search       String?
// }

// enum LocationType {
//     desk
//     room
// }

// model Location {
//     id          String        @id @default(cuid()) @map("_id")
//     name        String
//     email       String?       //INFO: Thise email will be used as userPrincipalName in Graph to search on information for a room!
//     type        LocationType
//     x           Float
//     y           Float
//     active      Boolean
//     Reservation Reservation[]
// }

// model Post {
//     id        String   @id @default(cuid()) @map("_id")
//     name      String
//     createdAt DateTime @default(now())
//     updatedAt DateTime @updatedAt

//     createdBy   User   @relation(fields: [createdById], references: [id])
//     createdById String

//     @@index([name])
// }

// // Necessary for Next auth
// model Account {
//     id                String  @id @default(cuid())
//     userId            String
//     type              String
//     provider          String
//     providerAccountId String
//     refresh_token     String? // @db.Text
//     access_token      String? // @db.Text
//     expires_at        Int?
//     token_type        String?
//     scope             String?
//     id_token          String? // @db.Text
//     session_state     String?
//     user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//     @@unique([provider, providerAccountId])
// }

// model Session {
//     id           String   @id @default(cuid())
//     sessionToken String   @unique
//     userId       String
//     expires      DateTime
//     user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//     id            String    @id @default(cuid())
//     name          String?
//     email         String?   @unique
//     emailVerified DateTime?
//     image         String?
//     accounts      Account[]
//     sessions      Session[]
//     posts         Post[]
// }

// model VerificationToken {
//     identifier String
//     token      String   @unique
//     expires    DateTime

//     @@unique([identifier, token])
// }
